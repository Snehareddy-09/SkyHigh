

@model SkyHigh.Models.User
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var registrationSuccess = ViewBag.RegistrationSuccess as bool? ?? false;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<div class="register-wrapper d-flex align-items-center justify-content-center min-vh-100">
    <div class="register-card shadow-lg bg-white rounded-4 overflow-hidden transition-card">
        <div class="row g-0">

            <!-- LEFT SIDE IMAGE -->
            <div class="col-lg-6 d-none d-lg-block position-relative">
                <img src="~/enhanced-ui/Registerimagechatgpt.png" alt="Travel" class="img-fluid h-100 w-100 object-fit-cover" />
            </div>

            <!-- RIGHT SIDE FORM -->
            <div class="col-lg-6 col-md-12 p-5">
                <div class="text-center mb-4">
                    <h4 class="fw-bold register-title"><i class="bi bi-airplane-engines"></i> Register</h4>
                </div>

                <!--  Progress Steps -->
                <div class="progress-section mb-4">
                    <div class="step-indicators d-flex justify-content-between mb-2">
                        <div class="circle step-circle active">1</div>
                        <div class="circle step-circle">2</div>
                        <div class="circle step-circle">3</div>
                    </div>
                    <div class="progress-container">
                        <div id="progressBar" class="progress-bar"></div>
                    </div>
                </div>

                @if (registrationSuccess)
                {
                    <script>
                        window.onload = function () {
                            alert("Registration successful! You can now login.");
                            window.location.href = '@Url.Action("Login", "Account")';
                        }
                    </script>
                }
                else
                {
                    <form method="post" id="registerForm" autocomplete="off" novalidate>

                        <!-- STEP 0: GET STARTED -->
                        <div class="form-step active text-center" id="step0">
                            <div class="fade-in-content mt-5">
                                <h3 class="fw-bold text-primary mb-3">Let’s Get Started!</h3>
                                <p class="text-muted mb-4 fs-6">Join SkyHigh Airlines and begin your journey to amazing destinations.</p>
                                <button type="button" class="btn btn-primary btn-next get-started px-5 py-2">
                                    Get Started <i class="bi bi-arrow-right-circle ms-1"></i>
                                </button>
                            </div>
                        </div>

                        <!-- STEP 1 -->
                        <div class="form-step" id="step1">
                            <div class="mb-3">
                                <label class="form-label">Full Name</label>
                                <input type="text" id="Name" name="Name" value="@Model.Name" class="form-control" required pattern="^[A-Za-z ]{2,50}$" />
                                <div class="invalid-feedback">This field is required.</div>

                            </div>
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" id="Email" name="Email" value="@Model.Email" class="form-control" required maxlength="100" />
                                <div class="invalid-feedback">This field is required.</div>

                            </div>
                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-outline-primary btn-back"><i class="bi bi-arrow-left-circle"></i> Back</button>
                                <button type="button" class="btn btn-primary btn-next">Next <i class="bi bi-arrow-right-circle"></i></button>
                            </div>
                        </div>

                        <!-- STEP 2 -->
                        <div class="form-step" id="step2">
                            <div class="mb-3">
                                <label class="form-label">Date of Birth</label>
                                <input type="date" id="DOB" name="DOB" value="@(Model.DOB != default ? Model.DOB.ToString("yyyy-MM-dd") : "")" class="form-control" required />
                                <div class="invalid-feedback">This field is required.</div>

                            </div>
                            <div class="mb-3">
                                <label class="form-label">Phone</label>
                                <input type="text" id="Phone" name="Phone" value="@Model.Phone" class="form-control"
                                       required pattern="^\d{10}$" title="Phone number must be exactly 10 digits." />
                                <div class="invalid-feedback">Please enter a valid 10-digit phone number.</div>

                            </div>
                            <div class="mb-3">
                                <label class="form-label">Gender</label>
                                <select asp-for="Gender" class="form-select" required>
                                    <option value="">-- Select Gender --</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-outline-primary btn-back"><i class="bi bi-arrow-left-circle"></i> Back</button>
                                <button type="button" class="btn btn-primary btn-next">Next <i class="bi bi-arrow-right-circle"></i></button>
                            </div>
                            <div class="invalid-feedback">This field is required.</div>

                        </div>


                        <!-- STEP 3 -->
                        <div class="form-step" id="step3">
                            <div class="mb-3">
                                <label class="form-label">Password</label>
                                <input type="password" id="Password" name="password" class="form-control" required minlength="6" maxlength="50" />
                                <div class="invalid-feedback">This field is required.</div>

                            </div>
                            <div class="mb-3">
                                <label class="form-label">Confirm Password</label>
                                <input type="password" id="ConfirmPassword" name="confirmPassword" class="form-control" required minlength="6" maxlength="50" />
                                <span id="passwordError" class="text-danger small d-none">Passwords do not match.</span>
                                <div class="invalid-feedback">This field is required.</div>

                            </div>

                            <div class="d-flex justify-content-between align-items-center mt-4">
                                <button type="button" class="btn btn-outline-primary btn-back"><i class="bi bi-arrow-left-circle"></i> Back</button>
                                <button type="submit" class="btn btn-register px-4">Register</button>
                            </div>

                        </div>




                        <!-- STEP 3 -->
                        <div class="form-step" id="step3">
                            <div class="mb-3">
                                <label class="form-label">Password</label>
                                <input type="password" id="PasswordHash" name="PasswordHash" class="form-control" required minlength="6" maxlength="50"
                                       data-val="true"
                                       data-val-required="Password is required."
                                       data-val-minlength="Password must be at least 6 characters long."
                                       data-val-minlength-min="6" />
                                <span class="text-danger small field-validation-valid" data-valmsg-for="password" data-valmsg-replace="true"></span>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Confirm Password</label>
                                <input type="password" id="PasswordHash" name="PasswordHash" class="form-control" required minlength="6" maxlength="50"
                                       data-val="true"
                                       data-val-required="Confirm password is required."
                                       data-val-equalto="Passwords do not match."
                                       data-val-equalto-other="*.password" />
                                <span class="text-danger small field-validation-valid" data-valmsg-for="confirmPassword" data-valmsg-replace="true"></span>
                            </div>

                            <div class="d-flex justify-content-between align-items-center mt-4">
                                <button type="button" class="btn btn-outline-primary btn-back"><i class="bi bi-arrow-left-circle"></i> Back</button>
                                <button type="submit" class="btn btn-register px-4">Register</button>
                            </div>
                        </div>
                        <script>
                            (function() {
                                const phone=documnet.getElementById('phone');
                                if(!phone) return;
                                function normalizeAndValidate(){
                                    //remove non-digits and limit length
                                    const digits=(phone.value || '').replace(/D/g, '').slice(0, 10);
                                    if(phone.value !== digits)phone.value=digits;
                                    //valid only when 10 digits exists
                                    if(/^\d{10}$/.test(digits)){
                                        phone.setCustomValidity('');
                                        phone.classList.remove('is-invalid');
                                        phone.classList.add('is-valid');
                                    }else{
                                        phone.setCustomValidity('phone must be exactly 10 digits');
                                        phone.classList.remove('is-valid');
                                        //only show invalid visual state once user entered something
                                        if(digits.length>0) phone.classList.add('is-invalid');
                                        else phone.classList.remove('is-invalid');
                                    }
                                }
                                //live enforcement
                                phone.addEventListener('input',normalizeAndValidate;
                                phone.addEventListener('blur',normalizeAndValidate;
                                //run once on load
                                document.addEventListener('DOMContentLoaded',normalizeAndValidate;
                            })();
                        </script>





                        @if (!ViewData.ModelState.IsValid)
                        {
                            <div class="text-danger mt-3">
                                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                {
                                    <div>@error.ErrorMessage</div>
                                }
                            </div>
                        }
                    </form>

                    <div class="text-center mt-3">
                        <small class="text-muted">
                            Already registered?
                            <a href="@Url.Action("Login", "Account")" class="text-primary fw-semibold">Login</a>
                        </small>
                    </div>

                }
            </div>
        </div>
    </div>
</div>

<script>
    const steps = document.querySelectorAll('.form-step');
    const nextBtns = document.querySelectorAll('.btn-next');
    const backBtns = document.querySelectorAll('.btn-back');
    const circles = document.querySelectorAll('.step-circle');
    const progressBar = document.getElementById('progressBar');
    const card = document.querySelector('.transition-card');

    let currentStep = 0;

    function updateProgress() {
        circles.forEach((circle, i) => {
            circle.classList.toggle('active', i < currentStep);
        });
        const progress = ((currentStep - 1) / (steps.length - 2)) * 100;
        progressBar.style.width = currentStep > 0 ? `${progress}%` : "0%";
    }

    function showStep(index) {
        steps.forEach((step, i) => step.classList.toggle('active', i === index));
        updateProgress();
    }

    backBtns.forEach(btn => btn.addEventListener('click', () => {
        if (currentStep > 0) {
            currentStep--;
            showStep(currentStep);
        }
    }));






         nextBtns.forEach(btn => btn.addEventListener('click', () => {
        const currentFormStep = steps[currentStep];
        const inputs = currentFormStep.querySelectorAll('input, select');
        let isValid = true;

        // Validate each field in the current step
        inputs.forEach(input => {
            if (!input.checkValidity()) {
                input.classList.add('is-invalid');
                isValid = false;
            } else {
                input.classList.remove('is-invalid');
            }
        });

        // Stop if any field is invalid
        if (!isValid) return;

        // Proceed to next step only if valid
        if (currentStep < steps.length - 1) {
            if (btn.classList.contains('get-started')) {
                card.classList.add('zoom-transition');
                setTimeout(() => {
                    currentStep++;
                    showStep(currentStep);
                    card.classList.remove('zoom-transition');
                }, 600);
            } else {
                currentStep++;
                showStep(currentStep);
            }
        }
    }));




    document.getElementById("registerForm")?.addEventListener("submit", function (e) {
        var pwd = document.getElementById("Password").value;
        var cpwd = document.getElementById("ConfirmPassword").value;
        var errorSpan = document.getElementById("passwordError");
        if (pwd !== cpwd) {
            errorSpan.classList.remove("d-none");
            e.preventDefault();
        } else {
            errorSpan.classList.add("d-none");
        }
    });

    updateProgress();
</script>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background: url('@Url.Content("~/images/Register-bg-image11.jpeg")') no-repeat center center fixed;
        background-size: cover;
        margin: 0;
        padding: 0;
    }

        /* === Semi-transparent overlay for readability === */
        body::before {
            content: "";
            position: fixed;
            inset: 0;
            background: rgba(255, 255, 255, 0.65);
            backdrop-filter: blur(3px);
            z-index: -1;
        }

    .register-card {
        width: 95%;
        max-width: 950px;
        background-color: rgba(255, 255, 255, 0.97);
        border-radius: 16px;
    }

    .register-title {
        color: #0078d7;
    }

    .form-label {
        font-weight: 500;
        color: #333;
    }

    .form-control, .form-select {
        border-radius: 8px;
        border: 1px solid #ced4da;
    }

        .form-control:focus, .form-select:focus {
            border-color: #0078d7;
            box-shadow: 0 0 8px rgba(0,120,215,0.3);
        }

    .btn {
        border-radius: 8px;
        transition: all 0.2s;
    }

    .btn-primary {
        background: linear-gradient(135deg, #0078d7, #00bcd4);
        border: none;
        color: white;
        font-weight: 600;
    }

    .btn-outline-primary {
        border-color: #0078d7;
        color: #0078d7;
        font-weight: 500;
    }

        .btn-outline-primary:hover {
            background-color: #0078d7;
            color: white;
        }

    .btn-register {
        background: linear-gradient(135deg, #00bcd4, #0078d7);
        border: none;
        color: #fff;
        font-weight: 600;
        border-radius: 8px;
    }

    /*  Step Progress */
    .step-circle {
        width: 30px;
        height: 30px;
        background-color: #e0e0e0;
        border-radius: 50%;
        color: #555;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        transition: all 0.3s;
    }

        .step-circle.active {
            background-color: #0078d7;
            color: white;
            transform: scale(1.1);
            box-shadow: 0 0 8px rgba(0,120,215,0.5);
        }

    .progress-container {
        width: 100%;
        height: 6px;
        background-color: #e9ecef;
        border-radius: 10px;
        position: relative;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, #0078d7, #00bcd4);
        width: 0%;
        border-radius: 10px;
        transition: width 0.4s ease;
    }

    .form-step {
        display: none;
        animation: fadeIn 0.5s ease;
    }

        .form-step.active {
            display: block;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(15px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .fade-in-content {
        animation: fadeInSlow 2s ease;
    }

    @@keyframes fadeInSlow {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* 🧭 Boarding Zoom Transition */
    .zoom-transition {
        animation: zoomIn 0.6s ease forwards;
    }

    @@keyframes zoomIn {
        0% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.05);
            opacity: 0.9;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }

    @@media (max-width: 992px) {
        .register-card {
            flex-direction: column;
        }
    }

    .text-center.mt-3 small a {
        text-decoration: none;
    }

        .text-center.mt-3 small a:hover {
            text-decoration: underline;
        }

    .is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 4px rgba(220,53,69,0.4);
    }

        .is-invalid:focus {
            outline: none;
            box-shadow: 0 0 5px rgba(220,53,69,0.6);
        }

    input:invalid::placeholder {
        color: #dc3545;
    }

</style>

